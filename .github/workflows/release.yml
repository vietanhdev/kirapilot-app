name: "Build and Release"

on:
  push:
    tags:
      - 'v*'


jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `KiraPilot v${process.env.PACKAGE_VERSION}`,
              body: 'KiraPilot is a cross-platform productivity application that combines task management, time tracking, and intelligent AI assistance. The app helps users navigate their day with precision through beautiful design and smart automation. Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
            os_name: "macos-arm64"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
            os_name: "macos-x64"
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ""
            os_name: "linux-x64"
          - platform: "windows-latest"
            args: ""
            os_name: "windows-x64"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: npm ci # Using npm ci for more reliable builds

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  rename-assets:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - name: rename release assets
        id: rename-assets
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            // Get all assets from the release
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id
            });

            console.log(`Found ${release.assets.length} assets to process`);

            // Define OS mappings based on file patterns
            const osMapping = {
              '.app.tar.gz': 'macos-arm64',
              '.app.tar.gz.sig': 'macos-arm64',
              '_x64.app.tar.gz': 'macos-x64',
              '_x64.app.tar.gz.sig': 'macos-x64',
              '.dmg': 'macos-universal',
              '.dmg.sig': 'macos-universal',
              '_x64_en-US.msi': 'windows-x64',
              '_x64_en-US.msi.zip': 'windows-x64',
              '_x64_en-US.msi.zip.sig': 'windows-x64',
              '.AppImage': 'linux-x64',
              '.AppImage.tar.gz': 'linux-x64',
              '.AppImage.tar.gz.sig': 'linux-x64',
              '.deb': 'linux-x64',
              '.deb.sig': 'linux-x64'
            };

            // Process each asset
            for (const asset of release.assets) {
              console.log(`Processing asset: ${asset.name}`);
              
              let newName = asset.name;
              let osName = null;

              // Determine OS based on file extension patterns
              for (const [pattern, os] of Object.entries(osMapping)) {
                if (asset.name.includes(pattern)) {
                  osName = os;
                  break;
                }
              }

              // Special handling for different file types
              if (asset.name.includes('aarch64') || asset.name.includes('arm64')) {
                osName = 'macos-arm64';
              } else if (asset.name.includes('x86_64') && asset.name.includes('.app')) {
                osName = 'macos-x64';
              } else if (asset.name.includes('.exe') || asset.name.includes('.msi')) {
                osName = 'windows-x64';
              } else if (asset.name.includes('.AppImage') || asset.name.includes('.deb')) {
                osName = 'linux-x64';
              }

              // Only rename if we found an OS identifier and it's not already in the name
              if (osName && !asset.name.includes(osName)) {
                const fileExtension = asset.name.split('.').slice(-1)[0];
                const baseName = asset.name.replace(/\.[^/.]+$/, '');
                const fullExtension = asset.name.substring(baseName.length);
                
                newName = `${baseName}-${osName}${fullExtension}`;
                
                console.log(`Renaming: ${asset.name} -> ${newName}`);

                try {
                  await github.rest.repos.updateReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    asset_id: asset.id,
                    name: newName
                  });
                  console.log(`Successfully renamed asset to: ${newName}`);
                } catch (error) {
                  console.error(`Failed to rename asset ${asset.name}:`, error);
                }
              } else {
                console.log(`Skipping ${asset.name} - no OS identifier found or already named correctly`);
              }
            }

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri, rename-assets]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: true,
              prerelease: false
            }) 