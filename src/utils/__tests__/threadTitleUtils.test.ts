import {
  generateThreadTitle,
  truncateThreadTitle,
  isAutoGeneratedTitle,
  validateThreadTitle,
} from '../threadTitleUtils';

describe('threadTitleUtils', () => {
  describe('generateThreadTitle', () => {
    it('should generate title from simple message', () => {
      const message = 'Help me plan my day';
      const title = generateThreadTitle(message);
      expect(title).toBe('Help me plan my day');
    });

    it('should truncate long messages at word boundaries', () => {
      const message =
        'This is a very long message that should be truncated at a reasonable word boundary to ensure readability';
      const title = generateThreadTitle(message);
      expect(title.length).toBeLessThanOrEqual(50);
      expect(title).toMatch(/\.\.\.$/);
      expect(title).not.toMatch(/\s\.\.\.$/); // Should not end with space before ...
    });

    it('should remove markdown formatting', () => {
      const message = '**Help** me with *task* management and `code` snippets';
      const title = generateThreadTitle(message);
      expect(title).toBe('Help me with task management and code snippets');
    });

    it('should handle headers and lists', () => {
      const message = '# Main Task\n- Item 1\n- Item 2\n1. First step';
      const title = generateThreadTitle(message);
      expect(title).toBe('Main Task');
    });

    it('should convert links to text', () => {
      const message =
        'Check out [this link](https://example.com) for more info';
      const title = generateThreadTitle(message);
      expect(title).toBe('Check out this link for more info');
    });

    it('should handle empty or whitespace-only messages', () => {
      expect(generateThreadTitle('')).toBe('New Thread');
      expect(generateThreadTitle('   ')).toBe('New Thread');
      expect(generateThreadTitle('\n\t  \n')).toBe('New Thread');
    });

    it('should take first sentence for multi-sentence messages', () => {
      const message =
        'Help me with task management. I need to organize my workflow. This is additional context.';
      const title = generateThreadTitle(message);
      expect(title).toBe('Help me with task management');
    });

    it('should capitalize first letter', () => {
      const message = 'help me with something';
      const title = generateThreadTitle(message);
      expect(title).toBe('Help me with something');
    });

    it('should handle messages with only punctuation', () => {
      const message = '...???!!!';
      const title = generateThreadTitle(message);
      expect(title).toBe('New Thread');
    });
  });

  describe('truncateThreadTitle', () => {
    it('should not truncate short titles', () => {
      const title = 'Short title';
      const truncated = truncateThreadTitle(title, 30);
      expect(truncated).toBe('Short title');
    });

    it('should truncate at word boundaries when possible', () => {
      const title = 'This is a moderately long title that needs truncation';
      const truncated = truncateThreadTitle(title, 30);
      expect(truncated.length).toBeLessThanOrEqual(30);
      expect(truncated).toMatch(/\.\.\.$/);
      expect(truncated).toBe('This is a moderately long...');
    });

    it('should hard truncate when no good word boundary exists', () => {
      const title = 'Supercalifragilisticexpialidocious';
      const truncated = truncateThreadTitle(title, 20);
      expect(truncated.length).toBe(20);
      expect(truncated).toMatch(/\.\.\.$/);
    });

    it('should use default max length of 30', () => {
      const title =
        'This is a very long title that should be truncated at the default length';
      const truncated = truncateThreadTitle(title);
      expect(truncated.length).toBeLessThanOrEqual(30);
    });
  });

  describe('isAutoGeneratedTitle', () => {
    it('should identify auto-generated titles', () => {
      expect(isAutoGeneratedTitle('New Thread')).toBe(true);
      expect(isAutoGeneratedTitle('Thread 1')).toBe(true);
      expect(isAutoGeneratedTitle('Thread 123')).toBe(true);
      expect(isAutoGeneratedTitle('Untitled Thread')).toBe(true);
      expect(isAutoGeneratedTitle('Chat 5')).toBe(true);
    });

    it('should not identify user-generated titles', () => {
      expect(isAutoGeneratedTitle('Help with task management')).toBe(false);
      expect(isAutoGeneratedTitle('My custom thread title')).toBe(false);
      expect(isAutoGeneratedTitle('Project discussion')).toBe(false);
    });
  });

  describe('validateThreadTitle', () => {
    it('should validate good titles', () => {
      const result = validateThreadTitle('Valid title');
      expect(result.isValid).toBe(true);
      expect(result.error).toBeUndefined();
    });

    it('should reject empty titles', () => {
      const result = validateThreadTitle('');
      expect(result.isValid).toBe(false);
      expect(result.error).toBe('Title cannot be empty');
    });

    it('should reject whitespace-only titles', () => {
      const result = validateThreadTitle('   ');
      expect(result.isValid).toBe(false);
      expect(result.error).toBe('Title cannot be empty');
    });

    it('should reject titles that are too long', () => {
      const longTitle = 'a'.repeat(101);
      const result = validateThreadTitle(longTitle);
      expect(result.isValid).toBe(false);
      expect(result.error).toBe('Title cannot exceed 100 characters');
    });

    it('should accept titles at the length limit', () => {
      const maxTitle = 'a'.repeat(100);
      const result = validateThreadTitle(maxTitle);
      expect(result.isValid).toBe(true);
    });
  });
});
