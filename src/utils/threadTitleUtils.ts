/**
 * Utility functions for thread title generation and management
 */

/**
 * Generate a thread title from message content
 * Takes the first message content and creates a concise, readable title
 */
export function generateThreadTitle(messageContent: string): string {
  if (!messageContent || messageContent.trim().length === 0) {
    return 'New Thread';
  }

  // Clean the message content
  let cleanContent = messageContent.trim();

  // Remove markdown formatting and get first meaningful line
  const lines = cleanContent
    .replace(/[*_`~]/g, '') // Remove markdown emphasis
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // Convert links to text
    .replace(/!\[([^\]]*)\]\([^)]+\)/g, '$1') // Convert images to alt text
    .split('\n') // Split by lines to handle headers and lists properly
    .map(line => {
      // Remove headers
      line = line.replace(/^#{1,6}\s+/, '');
      // Remove list markers
      line = line.replace(/^\s*[-*+]\s+/, '');
      line = line.replace(/^\s*\d+\.\s+/, '');
      return line.trim();
    })
    .filter(line => line.length > 0); // Remove empty lines

  // Take the first meaningful line as the base content
  cleanContent = lines.length > 0 ? lines[0] : cleanContent;

  // Check if content is only punctuation or empty after cleaning
  if (!cleanContent || /^[^\w\s]*$/.test(cleanContent)) {
    return 'New Thread';
  }

  // Split into sentences and take the first meaningful one
  const sentences = cleanContent
    .split(/[.!?]+/)
    .filter(s => s.trim().length > 0);
  let title = sentences[0]?.trim() || cleanContent;

  // If the title is too long, truncate it intelligently
  if (title.length > 50) {
    // Try to break at word boundaries
    const words = title.split(' ');
    let truncated = '';

    for (const word of words) {
      if ((truncated + ' ' + word).length > 47) {
        // Leave room for "..."
        break;
      }
      truncated += (truncated ? ' ' : '') + word;
    }

    title = truncated + (truncated.length < title.length ? '...' : '');
  }

  // Ensure the title is not empty after processing
  if (title.length === 0) {
    return 'New Thread';
  }

  // Capitalize first letter
  title = title.charAt(0).toUpperCase() + title.slice(1);

  return title;
}

/**
 * Truncate a thread title for display in the sidebar
 * Ensures consistent display length while preserving readability
 */
export function truncateThreadTitle(
  title: string,
  maxLength: number = 30
): string {
  if (title.length <= maxLength) {
    return title;
  }

  // Find the last space before the max length
  const truncateAt = title.lastIndexOf(' ', maxLength - 3);

  if (truncateAt > maxLength * 0.6) {
    // Only truncate at word boundary if it's not too short
    return title.substring(0, truncateAt) + '...';
  }

  // Otherwise, hard truncate
  return title.substring(0, maxLength - 3) + '...';
}

/**
 * Check if a title appears to be auto-generated (for updating purposes)
 */
export function isAutoGeneratedTitle(title: string): boolean {
  const autoGeneratedPatterns = [
    /^New Thread$/,
    /^Thread \d+$/,
    /^Untitled Thread$/,
    /^Chat \d+$/,
  ];

  return autoGeneratedPatterns.some(pattern => pattern.test(title));
}

/**
 * Validate a thread title
 */
export function validateThreadTitle(title: string): {
  isValid: boolean;
  error?: string;
} {
  if (!title || title.trim().length === 0) {
    return { isValid: false, error: 'Title cannot be empty' };
  }

  if (title.trim().length > 100) {
    return { isValid: false, error: 'Title cannot exceed 100 characters' };
  }

  return { isValid: true };
}
